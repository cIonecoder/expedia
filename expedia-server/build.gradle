plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

bootJar.enabled = false

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'

    group = 'org.clonecoder'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    configurations {
        asciidoctorExt
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        runtimeOnly 'org.postgresql:postgresql'
        runtimeOnly 'com.h2database:h2'

        // rest docs
        asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.6.RELEASE'
        testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:2.0.6.RELEASE'

        // 테스트에서 lombok 사용
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'io.rest-assured:rest-assured'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    ext {
        snippetsDir = file('build/generated-snippets')
    }

    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
    }

    task testDocument(type: Test) {
        useJUnitPlatform()
        filter {
            includeTestsMatching "*.documentation.*"
        }
    }

    asciidoctor {
        inputs.dir snippetsDir
        configurations 'asciidoctorExt'
        dependsOn test
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    bootJar {
        dependsOn asciidoctor
        from ("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }

    task copyDocument(type: Copy) {
        dependsOn asciidoctor

        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }
}

repositories {
    mavenCentral()
}

// 각 프로젝트에서만 사용하는 의존성 추가
project(':booking-server') {
    dependencies {
        compileOnly project(':product-server')
    }
}